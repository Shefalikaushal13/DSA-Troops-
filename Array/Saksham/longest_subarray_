class Solution{
public:
    int longestSubarray(vector<int> &nums, int k){
        int prefix_sum = 0 ; // to store the sum for 0 to i
        unordered_map<int,int> store; // prefix_sum and index 
        int maxLen=0; 
        for(int i=0; i<nums.size(); i++)
        {
            prefix_sum+=nums[i]; 
            if(prefix_sum == k)
            {
                // we have reached what we wanted from start
                int length = i + 1;
                maxLen = max(length, maxLen);
            }
            int need = prefix_sum-k; // if not reached that what we require in past to acheive k 
            if(store.find(need)!=store.end())
            {
                // if need exists already in map
                // find its index 
                int idx = store[need]; 
                int length = i-idx; // current my prefix index 
                maxLen=max(length,maxLen);

            }
            if (store.find(prefix_sum) == store.end())
            {
                // since we have to store the earliest index
                store[prefix_sum] = i;
            }
            //store[prefix_sum]=i; 
            //store prefix_sum and respective index in hashmap
        }
        
    }
};
